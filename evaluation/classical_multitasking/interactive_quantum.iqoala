META_START
    name: bob
    parameters: 
    csockets: 0 -> alice
    epr_sockets: 
META_END

^b0 {type = CL}:
    csocket = assign_cval() : 0
    ack = assign_cval() : 42

^b1 {type = QL, deadlines = [b0: 1]}:
    tuple<> = run_subroutine(tuple<>) : prepare

^b2 {type = CL, deadlines = [b0: 1]}:
    send_cmsg(csocket, ack)

^b3 {type = CC, deadlines = [b0: 1]}:
    angle = recv_cmsg(csocket)

^b4 {type = QL, deadlines = [b0: 1]}:
    tuple<> = run_subroutine(tuple<angle>) : rotate

^b5 {type = CL, deadlines = [b0: 1]}:
    send_cmsg(csocket, ack)

^b6 {type = CC, deadlines = [b0: 1]}:
    angle = recv_cmsg(csocket)

^b7 {type = QL, deadlines = [b0: 1]}:
    tuple<> = run_subroutine(tuple<angle>) : rotate

^b8 {type = CL, deadlines = [b0: 1]}:
    send_cmsg(csocket, ack)

^b6a {type = CC, deadlines = [b0: 1]}:
    angle = recv_cmsg(csocket)

^b7a {type = QL, deadlines = [b0: 1]}:
    tuple<> = run_subroutine(tuple<angle>) : rotate

^b8a {type = CL, deadlines = [b0: 1]}:
    send_cmsg(csocket, ack)

^b6b {type = CC, deadlines = [b0: 1]}:
    angle = recv_cmsg(csocket)

^b7b {type = QL, deadlines = [b0: 1]}:
    tuple<> = run_subroutine(tuple<angle>) : rotate

^b8b {type = CL, deadlines = [b0: 1]}:
    send_cmsg(csocket, ack)

^b6c {type = CC, deadlines = [b0: 1]}:
    angle = recv_cmsg(csocket)

^b7c {type = QL, deadlines = [b0: 1]}:
    tuple<> = run_subroutine(tuple<angle>) : rotate

^b8c {type = CL, deadlines = [b0: 1]}:
    send_cmsg(csocket, ack)

^b6d {type = CC, deadlines = [b0: 1]}:
    angle = recv_cmsg(csocket)

^b7d {type = QL, deadlines = [b0: 1]}:
    tuple<> = run_subroutine(tuple<angle>) : rotate

^b8d {type = CL, deadlines = [b0: 1]}:
    send_cmsg(csocket, ack)

^b6e {type = CC, deadlines = [b0: 1]}:
    angle = recv_cmsg(csocket)

^b7e {type = QL, deadlines = [b0: 1]}:
    tuple<> = run_subroutine(tuple<angle>) : rotate

^b8e {type = CL, deadlines = [b0: 1]}:
    send_cmsg(csocket, ack)

^b6f {type = CC, deadlines = [b0: 1]}:
    angle = recv_cmsg(csocket)

^b7f {type = QL, deadlines = [b0: 1]}:
    tuple<> = run_subroutine(tuple<angle>) : rotate

^b8f {type = CL, deadlines = [b0: 1]}:
    send_cmsg(csocket, ack)

^b6g {type = CC, deadlines = [b0: 1]}:
    angle = recv_cmsg(csocket)

^b7g {type = QL, deadlines = [b0: 1]}:
    tuple<> = run_subroutine(tuple<angle>) : rotate

^b8g {type = CL, deadlines = [b0: 1]}:
    send_cmsg(csocket, ack)

^b6h {type = CC, deadlines = [b0: 1]}:
    angle = recv_cmsg(csocket)

^b7h {type = QL, deadlines = [b0: 1]}:
    tuple<> = run_subroutine(tuple<angle>) : rotate

^b8h {type = CL, deadlines = [b0: 1]}:
    send_cmsg(csocket, ack)

^b9 {type = CC, deadlines = [b0: 1]}:
    angle = recv_cmsg(csocket)

^b10 {type = QL, deadlines = [b0: 1]}:
    tuple<outcome> = run_subroutine(tuple<>) : measure_z

^b11 {type = CL, deadlines = [b0: 1]}:
    return_result(outcome)

SUBROUTINE prepare
    params:
    returns:
    uses: 0
    keeps: 0
    request: 
  NETQASM_START
    set Q0 0
    init Q0

    // hadamard
    rot_y Q0 8 4
    rot_x Q0 16 4
  NETQASM_END

SUBROUTINE rotate
    params: angle
    returns:
    uses: 0
    keeps: 0
    request: 
  NETQASM_START
    load C0 @input[0]
    set Q0 0

    // NOTE don't use angle for now
    // Always rotate rot_z(pi/2)
    rot_y Q0 8 4
    rot_x Q0 8 4
    rot_y Q0 24 4
  NETQASM_END

SUBROUTINE measure_z
    params:
    returns: m
    uses: 0
    keeps:
    request: 
  NETQASM_START
    set Q0 0

    // hadamard
    rot_y Q0 8 4
    rot_x Q0 16 4

    meas Q0 M0
    store M0 @output[0]
  NETQASM_END